// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator dbml {
    provider = "prisma-dbml-generator"
}

model User {
    id                  Int     @id @default(autoincrement())
    firstName           String
    lastName            String
    email               String  @unique
    avatar              String?
    password            String
    isVerified          Boolean @default(false)
    isAdmin             Boolean @default(false)
    isDeliveryPersonnel Boolean @default(false)
    fullName            String  @map("CONCAT(firstName, ' ', lastName)")

    accountVerification AccountVerification?
    accountRecovery     AccountRecovery?
    store               Store?
    reviews             Review[]
    replies             Reply[]
    rating              Rating[]
    address             Address?
    notifications       Notification[]
    categoryRequests    CategoryRequest[]
    orders              Order[]
    chats               UserChat[]
    messages            Message[]
    cart                Cart?
    createdReports      Report[]             @relation(name: "report_creator")
    reports             Report[]             @relation(name: "reported_user")
    suspension          Suspension?
    deliveries          Delivery[]
    orderCompletion     OrderCompletion[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model AccountVerification {
    id   Int    @id @default(autoincrement())
    code String

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model AccountRecovery {
    id   Int    @id @default(autoincrement())
    code String

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Image {
    id        Int     @id @default(autoincrement())
    binary    Bytes
    src       String
    uniqueStr String? @unique

    userId     Int? @unique
    reviewId   Int? @unique
    businessId Int? @unique
    productId  Int?
    messageId  Int? @unique
    replyId    Int? @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Store {
    id        Int       @id @default(autoincrement())
    storeType StoreType
    rating    Float     @default(0)
    isDeleted Boolean   @default(false)

    user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int?        @unique
    business   Business?
    product    Product[]
    reviews    Review[]
    ratings    Rating[]
    orders     Order[]
    reports    Report[]
    suspension Suspension?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Business {
    id         Int     @id @default(autoincrement())
    name       String
    PAN        String?
    regImage   String?
    phone      String
    isVerified Boolean @default(false)

    store   Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId Int      @unique
    address Address?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Product {
    id             Int      @id @default(autoincrement())
    name           String
    description    String
    price          Float
    per            String?
    isSecondHand   Boolean
    images         String[]
    brand          String?
    madeIn         String?
    stockType      String?
    deliveryCharge Int
    rating         Float?   @default(0)
    subCategory    String
    isDeleted      Boolean  @default(false)
    hasBeenSold    Boolean  @default(false) // only for second hand products

    store        Store?             @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId      Int?
    reviews      Review[]
    ratings      Rating[]
    category     Category?          @relation(fields: [categoryName], references: [name])
    categoryName String?
    stock        Stock?
    variations   ProductVariation[]
    orders       Order[]
    cartItems    CartItem[]
    reports      Report[]
    suspension   Suspension?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariation {
    id      Int      @id @default(autoincrement())
    label   String
    options String[]

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int
}

model Category {
    name String @id @unique

    products Product[]
}

model CategoryRequest {
    name           String  @id @unique
    isAcknowledged Boolean @default(false)

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id    Int     @id @default(autoincrement())
    text  String
    image String?

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int?
    store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int?
    replies   Reply[]
    reports   Report[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [userId, storeId], name: "user_store")
    @@unique(fields: [userId, productId], name: "user_product")
}

model Rating {
    id    Int   @id @default(autoincrement())
    stars Float

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int?
    store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [userId, productId], name: "user_product")
    @@unique(fields: [userId, storeId], name: "user_store")
}

model Reply {
    id    Int     @id @default(autoincrement())
    text  String
    image String?

    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id          Int     @id @default(autoincrement())
    province    String
    city        String
    area        String
    description String? @default("")

    user       User?     @relation(fields: [userId], references: [id])
    userId     Int?      @unique
    business   Business? @relation(fields: [businessId], references: [id], onDelete: Cascade)
    businessId Int?      @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id   Int    @id @default(autoincrement())
    text String

    origin        User     @relation(fields: [originId], references: [id], onDelete: Cascade)
    originId      Int
    destinationId Int
    linkTo        String?  @default("")
    seen          Boolean? @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Stock {
    id       Int   @id @default(autoincrement())
    quantity Int?
    variants Json?

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int     @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id              Int         @id @default(autoincrement())
    status          OrderStatus @default(PLACED)
    unitPrice       Float
    isDelivered     Boolean
    deliveryCharge  Int?
    variant         Json?
    quantity        Int?
    consumerAddress Json?
    isDeleted       Boolean     @default(false)
    isAcknowledged  Boolean     @default(false)

    product         Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId       Int
    origin          User             @relation(fields: [originId], references: [id], onDelete: Cascade)
    originId        Int
    store           Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId         Int
    orderCompletion OrderCompletion?
    transaction     Transaction?
    delivery        Delivery?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OrderCompletion {
    id     Int                      @id @default(autoincrement())
    madeBy OrderCompletionRequestor

    order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId     Int   @unique
    requestor   User  @relation(fields: [requestorId], references: [id])
    requestorId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Delivery {
    id             Int     @id @default(autoincrement())
    deletedFor     Int[]   @default([])
    isAcknowledged Boolean @default(false)

    order    Order @relation(fields: [orderId], references: [id])
    orderId  Int   @unique
    madeBy   User  @relation(fields: [madeById], references: [id])
    madeById Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Transaction {
    id             Int     @id @default(autoincrement())
    deletedFor     Int?
    isDeleted      Boolean @default(false)
    isAcknowledged Boolean @default(false)
    createdMonth   Int
    createdYear    Int

    order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId Int   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Chat {
    id               String @id
    userIds          Int[]
    unseenMsgsCounts Json

    users    UserChat[]
    messages Message[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserChat {
    id Int @id @default(autoincrement())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Message {
    id      Int     @id @default(autoincrement())
    text    String?
    image   String?
    seen    Boolean @default(false)
    deleted Boolean @default(false)

    chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
    chatId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id Int @id @default(autoincrement())

    user   User       @relation(fields: [userId], references: [id])
    userId Int        @unique
    items  CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id       Int   @id @default(autoincrement())
    quantity Int?
    variant  Json?

    cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    cartId    Int
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Report {
    id             Int     @id @default(autoincrement())
    cause          String
    targetType     String
    isAcknowledged Boolean @default(false)

    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int?
    store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int?
    user      User?    @relation(fields: [userId], references: [id], name: "reported_user", onDelete: Cascade)
    userId    Int?
    review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId  Int?
    creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade, name: "report_creator")
    creatorId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [creatorId, productId], name: "creator_product")
    @@unique(fields: [creatorId, storeId], name: "creator_store")
}

model Suspension {
    id         Int    @id @default(autoincrement())
    cause      String
    targetType String

    product   Product? @relation(fields: [productId], references: [id])
    productId Int?     @unique
    store     Store?   @relation(fields: [storeId], references: [id])
    storeId   Int?     @unique
    user      User?    @relation(fields: [userId], references: [id])
    userId    Int?     @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// model Search {
//     id    Int    @id @default(autoincrement())
//     query String

//     user   User @relation(fields: [userId], references: [id])
//     userId Int

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

enum StoreType {
    IND
    BUS
}

enum BusinessStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum OrderStatus {
    PLACED
    CONFIRMED
    REJECTED
    CANCELLED
    PACKAGED
    COMPLETED
}

enum OrderCompletionRequestor {
    SELLER
    DELIVERY_PERSONNEL
}
