// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int     @id @default(autoincrement())
    firstName  String
    lastName   String
    email      String  @unique
    avatar     String?
    password   String
    isVerified Boolean @default(false)
    isAdmin    Boolean @default(false)

    accountVerification AccountVerification?
    accountRecovery     AccountRecovery?
    store               Store?
    reviews             Review[]
    replies             Reply[]
    rating              Rating[]
    address             Address?
    notifications       Notification[]
    categoryRequests    CategoryRequest[]
    orders              Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model AccountVerification {
    id   Int    @id @default(autoincrement())
    code String

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model AccountRecovery {
    id   Int    @id @default(autoincrement())
    code String

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Image {
    id        Int     @id @default(autoincrement())
    binary    Bytes
    src       String
    uniqueStr String? @unique

    userId     Int? @unique
    reviewId   Int? @unique
    businessId Int? @unique
    productId  Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Store {
    id        Int       @id @default(autoincrement())
    storeType StoreType
    rating    Float     @default(0)

    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int       @unique
    business Business?
    product  Product[]
    reviews  Review[]
    ratings  Rating[]
    orders   Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Business {
    id         Int     @id @default(autoincrement())
    name       String
    ownerName  String
    PAN        String?
    regImage   String?
    phone      String
    isVerified Boolean @default(false)

    store   Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId Int      @unique
    address Address?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Product {
    id             Int      @id @default(autoincrement())
    name           String
    description    String
    price          Float
    per            String?
    isSecondHand   Boolean
    images         String[]
    isActive       Boolean  @default(false)
    brand          String?
    madeIn         String?
    stockType      String?
    deliveryCharge Int
    rating         Float?   @default(0)
    subCategory    String

    store        Store?             @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId      Int?
    reviews      Review[]
    ratings      Rating[]
    category     Category?          @relation(fields: [categoryName], references: [name])
    categoryName String?
    stock        Stock?
    variations   ProductVariation[]
    orders       Order[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductVariation {
    id      Int      @id @default(autoincrement())
    label   String
    options String[]

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int
}

model Category {
    name String @id @unique

    products Product[]
}

model CategoryRequest {
    name String @id @unique

    user   User @relation(fields: [userId], references: [id])
    userId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id    Int     @id @default(autoincrement())
    text  String
    image String?

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int?
    store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int?
    replies   Reply[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [userId, storeId], name: "user_store")
    @@unique(fields: [userId, productId], name: "user_product")
}

model Rating {
    id    Int @id @default(autoincrement())
    stars Int

    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    Int
    product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int?
    store     Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [userId, productId], name: "user_product")
    @@unique(fields: [userId, storeId], name: "user_store")
}

model Reply {
    id    Int     @id @default(autoincrement())
    text  String
    image String?

    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   Int
    review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reviewId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Address {
    id          Int     @id @default(autoincrement())
    province    String
    district    String? @default("")
    city        String
    area        String
    description String? @default("")

    user       User?     @relation(fields: [userId], references: [id])
    userId     Int?      @unique
    business   Business? @relation(fields: [businessId], references: [id])
    businessId Int?      @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id   Int    @id @default(autoincrement())
    text String

    origin        User     @relation(fields: [originId], references: [id], onDelete: Cascade)
    originId      Int
    destinationId Int
    linkTo        String?  @default("")
    seen          Boolean? @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Stock {
    id       Int   @id @default(autoincrement())
    quantity Int?
    variants Json?

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int     @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id              Int         @id @default(autoincrement())
    status          OrderStatus @default(PLACED)
    unitPrice       Float
    isDelivered     Boolean
    deliveryCharge  Int?
    variant         Json?
    quantity        Int?
    consumerAddress Json?
    isDeleted       Boolean     @default(false)

    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId Int
    origin    User    @relation(fields: [originId], references: [id], onDelete: Cascade)
    originId  Int
    store     Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    storeId   Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum StoreType {
    IND
    BUS
}

enum BusinessStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum OrderStatus {
    PLACED
    CONFIRMED
    REJECTED
    CANCELLED
    PACKAGED
}